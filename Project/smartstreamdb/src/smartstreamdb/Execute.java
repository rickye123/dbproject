package smartstreamdb;

/* 
 This class is used to execute SQL queries and updates 
 on the database. It includes the insert method and 
 two query methods which return all orders with the 
 first name available, and people with at least one order. 
 This class also includes JUnit testing for the relevant 
 methods.  
 */

import java.util.*;
import java.sql.*;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class Execute {
	
	private Connection connection; 
	
	/**
	 * Constructor
	 * @param connection - Connection instance passed
	 * to change the local connection instance
	 */
	public Execute(Connection connection) {
		this.connection = connection; 
	}

	/**
	 * method takes an array list of Strings (header) and concatenates this
	 * into one string (separated by a ,)so that it can be inserted into the SQL query. 
	 * The "?" are generated by taking the number of columns as the size and concatenating
	 * ? characters separated by a comma
	 * @param table - 2D array list of Strings which contains the fields to be added to the db
	 * @param header - array list of strings which make up the header, which will be 
	 * used in the INSERT statement to see which columns to update
	 * @param name - the name of the table being updated in the database
	 */
    public void insert(List<List<String>> table, List<String> header, String name) {

        String questionMarks = generateQuestionMarks(table.get(0).size());
        String columns = generateColumns(header);

        final String SQL = "INSERT INTO " + name + " ( " + columns 
        + ") VALUES (" + questionMarks + ")";

        // catch statement if SQL is invalid 
	    try(PreparedStatement preparedStatement = connection.prepareStatement(SQL)) {
			
	    	// search through each row of array list and execute update 
			int j = 1; 
			while(j < table.size()) {
				int i = 0; 
				int preparedStatemenetParamater = 1; // first parameter of setString method
				while(i < table.get(j).size()) {
					preparedStatement.setString(preparedStatemenetParamater, table.get(j).get(i));
					i++; 
					preparedStatemenetParamater++; 
				}
				preparedStatement.executeUpdate(); // executes an update on the affected table in the DB
				j++; 
			}
		} catch (SQLException executeException) {
            throw new Error("Invalid SQL Statement." + executeException);
		}
    }
    
    /**
     * purely for testing - this function is used to delete the given 
     * rows from a table in the database 
     * @param name - the table name 
     * @param columnName - the name of the column
     * @param query - the where condition
     */
    public void deleteRows(String name, String columnName, String query) {
        
    	final String SQL = "DELETE FROM " + name + " WHERE " + columnName + " = " + query;
    	
    	try (PreparedStatement preparedStatement = connection.prepareStatement(SQL)) {
    		preparedStatement.executeUpdate();
    	} catch (SQLException executeException) {
    		throw new Error("Invalid SQL Statement." + executeException);
    	}
    }
    
    /**
     * Method returns all the orders in the `ORDER` table where the first name of the 
     * person who made the order is available. So if the FIRST_NAME column is null, 
     * this will not be returned by the query 
     * @return - a 2D array list of Strings containing orders and first name (if available)
     * or empty list when no rows are found 
     */
    public List<List<String>> getOrdersWhenFirstNameAvailable() {
    	final String SQL = "SELECT ORDER_ID, ORDER_NUMBER, FIRST_NAME FROM PERSON INNER JOIN "
    	+ "`ORDER` ON PERSON.PERSON_ID = `ORDER`.PERSON_ID WHERE FIRST_NAME IS NOT NULL";
    	
    	try (PreparedStatement preparedStatement = connection.prepareStatement(SQL)) {
    		List<List<String>> result = new ArrayList<List<String>>();
    		
    		ResultSet resultSet = preparedStatement.executeQuery();
    		
    		if(resultSet.next()) {
    			result.add(generateTopRow("ORDER_ID", "ORDER_NUMBER", "FIRST_NAME"));
    			
    			int i = 1; 
    			do {
	    		    result.add(new ArrayList<String>());
	    		    result.get(i).add(resultSet.getString("ORDER_ID"));
	    		    result.get(i).add(resultSet.getString("ORDER_NUMBER"));
	    		    result.get(i).add(resultSet.getString("FIRST_NAME"));
	    		    i++;
    		    } while(resultSet.next());
    		    return result; 
    		}
    		else {
    			result.add(new ArrayList<String>());
    			result.get(0).add("Empty set");
    			return result; 
    		}    		
    	} catch (SQLException executeException) {
    		throw new Error("Invalid SQL Statement. " + executeException);
    	}
    }
    
    /**
     * finds the number of orders per person and only show people who have 
     * at least one order
     * @return - 2D array list of strings containing either all the people
     * with one order or more or empty set if no rows returned by the query 
     */
    public List<List<String>> getPersonsWithOneOrder() {
        
    	final String SQL = "SELECT PERSON.PERSON_ID, FIRST_NAME, LAST_NAME, " 
            + "STREET, CITY, COUNT(*) AS ORDERS FROM `ORDER` INNER JOIN PERSON "
    		+ "ON PERSON.PERSON_ID = `ORDER`.PERSON_ID GROUP BY PERSON.PERSON_ID "
            + "HAVING ORDERS >= 1";
    	
    	try (PreparedStatement preparedStatement = connection.prepareStatement(SQL)) {
    		List<List<String>> result = new ArrayList<List<String>>();
    		
    		ResultSet resultSet = preparedStatement.executeQuery();
    		
    		if(resultSet.next()) {
    			result.add(generateTopRow("PERSON_ID", "FIRST_NAME", "LAST_NAME", 
    					"STREET", "CITY", "ORDERS"));
    			
    			int i = 1; 
    			do {
	    		    result.add(new ArrayList<String>());
	    		    result.get(i).add(resultSet.getString("PERSON.PERSON_ID"));
	    		    result.get(i).add(resultSet.getString("FIRST_NAME"));
	    		    result.get(i).add(resultSet.getString("LAST_NAME"));
	    		    result.get(i).add(resultSet.getString("STREET"));
	    		    result.get(i).add(resultSet.getString("CITY"));
	    		    result.get(i).add(resultSet.getString("ORDERS"));
	    		    i++;
    		    } while(resultSet.next());
    		    return result; 
    		}
    		else {
    			result.add(new ArrayList<String>());
    			result.get(0).add("Empty set");
    			return result; 
    		}    		
    	} catch (SQLException executeException) {
    		throw new Error("Invalid SQL Statement. " + executeException);
    	}
    }
    
    /**
     * used to create the header of the table
     * @param columns - the names of the columns 
     * @return an array list of Strings containing the column names 
     */
    public List<String> generateTopRow(String ... columns) {
    
    	List<String> header = new ArrayList<String>();
    	
    	for (String column : columns) {
    		header.add(column);
    	}
    	
    	return header; 
    }

    /**
     * concatenates an array list of strings into one large 
     * string separated by , characters - then removes the final
     * comma character
     * @param header - array list of strings
     * @return a string containing the columns to be inserted into
     * a database, e.g. "ORDER_ID, ORDER_NUMBER, PERSON_ID"
     */
	public String generateColumns(List<String> columns) {
		
		String separatedColumns = ""; // create an empty string
		
		// concatenate each string in header and add a "," character  
		for (String column : columns) {
			separatedColumns = separatedColumns.concat(column + ","); 
		}
		
		// remove the final "," character by making column equal to 
		// substring of itself - 1 
		if(separatedColumns.endsWith(",")) {
			separatedColumns = separatedColumns.substring(0, separatedColumns.length() -1);
		}
			
		return separatedColumns; 
	}

	
    /**
     * creates a string of ? characters based on the size
     * @param size - the number of ? characters to be generated
     * @return a string containing ? characters, separated by 
     * commas, e.g. "?, ?, ?" for when the size is 3
     */
    public String generateQuestionMarks(int size) {
		
		try {
			// create an array of size "size"
			String[] strArray = new String[size]; 

			int i = 0; 
			while (i < size) {
				strArray[i] = "?,"; // e.g. "?,?,?," for size of 3
				i++; 
			}

			String questionMarks = ""; // create an empty string 

			for (String qMark : strArray) {
				questionMarks = questionMarks.concat(qMark);
			}

			// get the string minus the last character - removes the , character
			if(questionMarks.endsWith(",")) {
				questionMarks = questionMarks.substring(0, questionMarks.length() - 1);
			}
			return questionMarks; 
		} catch (Exception executeException) {
			throw new Error(executeException);
		}

	}
	
	public static void main(String[] args) {
		
		Connector testDB = new Connector();
		Read read = new Read();
		Map<String, String> connectionVariables = read.readFromConfigFile("config.properties");
		testDB.establishJDBCDriver(); 
		testDB.open(connectionVariables); 
		
		Connection c = testDB.getConnection();
		
		Execute testQueries = new Execute(c);
		testQueries.testing();
		
	}
	
	public void testing() {
		testInsert();
		testGenerateQuestionMarks();
		testGenerateColumns();
		testGenerateTopRow();
		System.out.println("All Tests Passed");
	}
	
	@Test 
	private void testGenerateQuestionMarks() {
		
		int size = 2; 
		String test1 = generateQuestionMarks(size);
		assertEquals("?,?", test1);
		size = 3; 
		String test2 = generateQuestionMarks(size);
		assertEquals("?,?,?", test2);
		size = 4; 
		String test3 = generateQuestionMarks(size);
		assertEquals("?,?,?,?", test3);

	}
	
	@Test
	private void testInsert() {
		
		Read read = new Read();
		read.readFromDataFile("Person.data", ",");
		
		List<List<String>> table = read.getTableFromFile();
		Program db = new Program();
		List<String> header = db.createHeader("PERSON_ID", "FIRST_NAME", "LAST_NAME", "STREET", "CITY");
		String tableName = "PERSON";
		insert(table, header, tableName);
		
		List<List<String>> people = getUsers();
		
		assertEquals("1", people.get(0).get(0));
		assertEquals("2", people.get(1).get(0));
		assertEquals("3", people.get(2).get(0));
		
		assertEquals("Ola", people.get(0).get(1));
		assertEquals("Hansen", people.get(0).get(2));
		assertEquals("Timoteivn", people.get(0).get(3));
		assertEquals("Sandnes", people.get(0).get(4));
		
		deleteRows("PERSON", "PERSON_ID", "1");
		deleteRows("PERSON", "PERSON_ID", "2");
		deleteRows("PERSON", "PERSON_ID", "3");
	}
	
	@Test 
	private void testGenerateColumns() {
	    
		Program db = new Program();
		List<String> testHeader1 = db.createHeader("PERSON_ID", "FIRST_NAME", 
				"LAST_NAME", "STREET", "CITY");
		String test1 = generateColumns(testHeader1);
		assertEquals("PERSON_ID,FIRST_NAME,LAST_NAME,STREET,CITY", test1);
		
		List<String> testHeader2 = db.createHeader("ORDER_ID", "ORDER_NUMBER", 
				"PERSON_ID");
		String test2 = generateColumns(testHeader2);
		assertEquals("ORDER_ID,ORDER_NUMBER,PERSON_ID", test2);
		
	}

	@Test 
	private void testGenerateTopRow() {
	    
		List<String> test1 = generateTopRow("ORDER_ID", "ORDER_NUMBER", "PERSON_ID");
		assertEquals("ORDER_ID", test1.get(0));
		assertEquals("ORDER_NUMBER", test1.get(1));
		assertEquals("PERSON_ID", test1.get(2));
		
		List<String> test2 = generateTopRow("PERSON_ID", "FIRST_NAME", "LAST_NAME", 
				"STREET", "CITY");
		assertEquals("PERSON_ID", test2.get(0));
		assertEquals("FIRST_NAME", test2.get(1));
		assertEquals("LAST_NAME", test2.get(2));
		assertEquals("STREET", test2.get(3));
		assertEquals("CITY", test2.get(4));
		
	}
	
	/**
	 * Purely for debugging, this function is used to return all the fields 
	 * in the table "PERSON" in the database 
	 * @return a 2D array list of Strings containing the fields of the table 
	 * "PERSON" 
	 */
	public List<List<String>> getUsers() {
		
		final String SQL = "SELECT * FROM PERSON";
		
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL)) {
            List<List<String>> result = new ArrayList<List<String>>();
    		
    		ResultSet resultSet = preparedStatement.executeQuery();
    		
    		if(resultSet.next()) {
    		
    			int i = 0; 
    			do {
	    		    result.add(new ArrayList<String>());
	    		    result.get(i).add(resultSet.getString("PERSON_ID"));
	    		    result.get(i).add(resultSet.getString("FIRST_NAME"));
	    		    result.get(i).add(resultSet.getString("LAST_NAME"));
	    		    result.get(i).add(resultSet.getString("STREET"));
	    		    result.get(i).add(resultSet.getString("CITY"));
	    		    i++;
    		    } while(resultSet.next());
    		    return result; 
    		}
    		else {
    			result.add(new ArrayList<String>());
    			result.get(0).add("Empty set");
    			return result; 
    		}
		} catch (SQLException executeException) {
			throw new Error("Invalid SQL Statement. " + executeException);
		}
		
	}

	/**
	 * purely for testing - returns all the fields in the "`ORDER`" table 
	 * @return a 2D array list of strings containing the fields in `ORDER`
	 */
    public List<List<String>> getOrders() {
		
		final String SQL = "SELECT * FROM `ORDER`";
		
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL)) {
            List<List<String>> result = new ArrayList<List<String>>();
    		
    		ResultSet resultSet = preparedStatement.executeQuery();
    		
    		if(resultSet.next()) {
    		
    			int i = 0; 
    			do {
	    		    result.add(new ArrayList<String>());
	    		    result.get(i).add(resultSet.getString("ORDER_ID"));
	    		    result.get(i).add(resultSet.getString("ORDER_NUMBER"));
	    		    result.get(i).add(resultSet.getString("PERSON_ID"));
	    		    i++;
    		    } while(resultSet.next());
    		    return result; 
    		}
    		else {
    			result.add(new ArrayList<String>());
    			result.get(0).add("Empty set");
    			return result; 
    		}    		
		} catch (SQLException executeException) {
			throw new Error("Invalid SQL Statement. " + executeException);
		}
		
	}
	
}